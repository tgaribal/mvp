'use strict';

var express = require('express');
var parser = require('body-parser');
var mongoose = require('mongoose');
var React = require('react');
var ReactDOMServer = require('react-dom/server');
var Promise = require('bluebird');

var Initiative = require('./initiativeModel');
var User = require('./userModel');

var app = express();
var port = 8080;

mongoose.connect('mongodb://localhost/ivote');
var db = mongoose.connection;
db.on('error', console.error);
db.once('open', function () {
  console.log('Open Mongoose connection');
});

// app.use(render);
app.use(parser.json());
app.use('/*', function (req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

app.get('/initiatives', function (req, res, next) {
  Initiative.find().exec(function (err, initiative) {
    console.log('get works');
    res.status(200).send(initiative);
  });
});
app.post('/initiatives', function (req, res, next) {});

app.get('/users', function (req, res, next) {
  User.find().exec(function (err, user) {
    console.log('user get works');
    res.status(200).send(user);
  });
});
app.post('/users', function (req, res, next) {
  var vote = req.body.vote;
  var username = req.body.user;
  var initiative = req.body.initiative;
  User.findOne({ username: username }).exec(function (err, user) {
    if (!user) {
      console.log('not a valid user');
    } else {
      if (user.votes[initiative] === vote) {
        delete user.votes[initiative];
      } else {
        user.votes[initiative] = vote;
      }
      User.update({ _id: user._id }, { $set: { votes: user.votes } }, function (err, user) {
        if (err) {
          console.log(err);
        };
        res.send(user);
      });
    }
  });
});

app.listen(port, function (err) {
  if (err) {
    console.log("ERROR!!!!!");
  } else {
    console.log("Started listening on port 8080");
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXJzZXIiLCJtb25nb29zZSIsIlJlYWN0IiwiUmVhY3RET01TZXJ2ZXIiLCJQcm9taXNlIiwiSW5pdGlhdGl2ZSIsIlVzZXIiLCJhcHAiLCJwb3J0IiwiY29ubmVjdCIsImRiIiwiY29ubmVjdGlvbiIsIm9uIiwiY29uc29sZSIsImVycm9yIiwib25jZSIsImxvZyIsInVzZSIsImpzb24iLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGVhZGVyIiwiZ2V0IiwiZmluZCIsImV4ZWMiLCJlcnIiLCJpbml0aWF0aXZlIiwic3RhdHVzIiwic2VuZCIsInBvc3QiLCJ1c2VyIiwidm90ZSIsImJvZHkiLCJ1c2VybmFtZSIsImZpbmRPbmUiLCJ2b3RlcyIsInVwZGF0ZSIsIl9pZCIsIiRzZXQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxTQUFTRCxRQUFRLGFBQVIsQ0FBYjtBQUNBLElBQUlFLFdBQVdGLFFBQVEsVUFBUixDQUFmO0FBQ0EsSUFBSUcsUUFBUUgsUUFBUSxPQUFSLENBQVo7QUFDQSxJQUFJSSxpQkFBaUJKLFFBQVEsa0JBQVIsQ0FBckI7QUFDQSxJQUFJSyxVQUFVTCxRQUFRLFVBQVIsQ0FBZDs7QUFHQSxJQUFJTSxhQUFhTixRQUFRLG1CQUFSLENBQWpCO0FBQ0EsSUFBSU8sT0FBT1AsUUFBUSxhQUFSLENBQVg7O0FBRUEsSUFBSVEsTUFBTVQsU0FBVjtBQUNBLElBQUlVLE9BQU8sSUFBWDs7QUFJQVAsU0FBU1EsT0FBVCxDQUFpQiwyQkFBakI7QUFDQSxJQUFJQyxLQUFLVCxTQUFTVSxVQUFsQjtBQUNBRCxHQUFHRSxFQUFILENBQU0sT0FBTixFQUFlQyxRQUFRQyxLQUF2QjtBQUNBSixHQUFHSyxJQUFILENBQVEsTUFBUixFQUFnQixZQUFZO0FBQzFCRixVQUFRRyxHQUFSLENB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dWlyZSgnZXhwcmVzcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJylcbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NU2VydmVyID0gcmVxdWlyZSgncmVhY3QtZG9tL3NlcnZlcicpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5cbnZhciBJbml0aWF0aXZlID0gcmVxdWlyZSgnLi9pbml0aWF0aXZlTW9kZWwnKTtcbnZhciBVc2VyID0gcmVxdWlyZSgnLi91c2VyTW9kZWwnKTtcblxudmFyIGFwcCA9IGV4cHJlc3MoKTtcbnZhciBwb3J0ID0gODA4MDtcblxuXG5cbm1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly9sb2NhbGhvc3QvaXZvdGUnKTtcbnZhciBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5kYi5vbignZXJyb3InLCBjb25zb2xlLmVycm9yKTtcbmRiLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKCdPcGVuIE1vbmdvb3NlIGNvbm5lY3Rpb24nKVxufSk7XG5cblxuXG4vLyBhcHAudXNlKHJlbmRlcik7XG5hcHAudXNlKHBhcnNlci5qc29uKCkpO1xuYXBwLnVzZSgnLyonLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIiwgXCJPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0XCIpO1xuICBuZXh0KCk7XG59KTtcblxuXG5hcHAuZ2V0KCcvaW5pdGlhdGl2ZXMnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgSW5pdGlhdGl2ZS5maW5kKCkuZXhlYyhmdW5jdGlvbihlcnIsIGluaXRpYXRpdmUpIHtcbiAgICBjb25zb2xlLmxvZygnZ2V0IHdvcmtzJyk7XG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQoaW5pdGlhdGl2ZSk7IFxuICB9KVxufSlcbmFwcC5wb3N0KCcvaW5pdGlhdGl2ZXMnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbn0pXG5cbmFwcC5nZXQoJy91c2VycycsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICBVc2VyLmZpbmQoKS5leGVjKGZ1bmN0aW9uKGVyciwgdXNlcikge1xuICAgIGNvbnNvbGUubG9nKCd1c2VyIGdldCB3b3JrcycpO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHVzZXIpO1xuICB9KVxufSlcbmFwcC5wb3N0KCcvdXNlcnMnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpe1xuICB2YXIgdm90ZSA9IHJlcS5ib2R5LnZvdGU7XG4gIHZhciB1c2VybmFtZSA9IHJlcS5ib2R5LnVzZXI7XG4gIHZhciBpbml0aWF0aXZlID0gcmVxLmJvZHkuaW5pdGlhdGl2ZVxuICBVc2VyLmZpbmRPbmUoe3VzZXJuYW1lOiB1c2VybmFtZX0pXG4gIC5leGVjKGZ1bmN0aW9uIChlcnIsIHVzZXIpIHtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdub3QgYSB2YWxpZCB1c2VyJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHVzZXIudm90ZXNbaW5pdGlhdGl2ZV0gPT09IHZvdGUpIHtcbiAgICAgICAgZGVsZXRlIHVzZXIudm90ZXNbaW5pdGlhdGl2ZV1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXIudm90ZXNbaW5pdGlhdGl2ZV0gPSB2b3RlO1xuICAgICAgfVxuICAgICAgVXNlci51cGRhdGUoe19pZDogdXNlci5faWR9LCB7ICRzZXQ6IHsgdm90ZXM6IHVzZXIudm90ZXN9fSwgZnVuY3Rpb24oZXJyLCB1c2VyKSB7XG4gICAgICAgIGlmIChlcnIpIHsgY29uc29sZS5sb2coZXJyKX07XG4gICAgICAgIHJlcy5zZW5kKHVzZXIpXG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn0pXG4gIFxuXG5cbmFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24oZXJyKSB7XG4gIGlmIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkVSUk9SISEhISFcIilcbiAgfSBlbHNlICB7XG4gICAgY29uc29sZS5sb2coXCJTdGFydGVkIGxpc3RlbmluZyBvbiBwb3J0IDgwODBcIik7IFxuICB9XG59KTtcblxuIl19